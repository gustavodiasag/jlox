package jlox;

import java.util.List;

abstract class Expr {
	
	interface Visitor<R> {
		R visitBinaryExpr(Binary expr);
		R visitGroupingExpr(Grouping expr);
		R visitLiteralExpr(Literal expr);
		R visitTernaryExpr(Ternary expr);
		R visitUnaryExpr(Unary expr);
	}
	
	abstract <R> R accept(Visitor<R> visitor);
	
	static class Binary extends Expr {
		final Expr left;
		final Token operator;
		final Expr right;
		
		Binary(Expr left, Token operator, Expr right) {
			this.left = left;
			this.operator = operator;
			this.right = right;
        }

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitBinaryExpr(this);
		}
	}
	
	static class Grouping extends Expr {
		final Expr expression;
		
		Grouping(Expr expression) {
			this.expression = expression;
        }

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitGroupingExpr(this);
		}
	}
	
	static class Literal extends Expr {
		final Object value;
		
		Literal(Object value) {
			this.value = value;
        }

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitLiteralExpr(this);
		}
	}
	
	static class Ternary extends Expr {
		final Expr eval, left, right;
		final Token valid, invalid;
		
		Ternary(Expr eval, Token valid, Expr left, Token invalid, Expr right) {
			this.eval = eval;
			this.valid = valid;
			this.left = left;
			this.invalid = invalid;
			this.right = right;
		}
		
	}
	
	static class Unary extends Expr {
		final Token operator;
		final Expr right;
		
		Unary(Token operator, Expr right) {
			this.operator = operator;
			this.right = right;
        }

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitUnaryExpr(this);
		}
	}

}
