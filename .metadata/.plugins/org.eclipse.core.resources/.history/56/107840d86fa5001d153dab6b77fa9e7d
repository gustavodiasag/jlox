package jlox;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static jlox.TokenType.*;

public class Scanner {
    private final String source;
    private final List<Token> tokens = new ArrayList<>();
    private static final Map<String, TokenType> keywords;

    /**
     * The start and current filds are offsets that index into the string
     * 
     * The start field points to the first character in the lexceme being
     * scanned, and current points at the character currently being
     * considered
     */
    private int start = 0;
    private int current = 0;

    /**
     * The line field tracks what source line current is on so we can
     * produce tokens that know their location
     */
    private int line = 1;

    Scanner(String source) {
        this.source = source;
    }
    
    /**
     * To handle keywords, we see if the identifier's lexeme is one of
     * the reserved words. If so, we use a token type specific to that
     * keyword.
     */
    static {
        keywords = new HashMap<>();
        keywords.put("and", AND);
        keywords.put("class", CLASS);
        keywords.put("else", ELSE);
        keywords.put("false", FALSE);
        keywords.put("for", FOR);
        keywords.put("fun", FUN);
        keywords.put("if", IF);
        keywords.put("nil", NIL);
        keywords.put("or", OR);
        keywords.put("print", PRINT);
        keywords.put("return", RETURN);
        keywords.put("super", SUPER);
        keywords.put("this", THIS);
        keywords.put("true", TRUE);
        keywords.put("var", VAR);
        keywords.put("while", WHILE);
    }

    /**
     * The scanner works its way through the source code, adding tokens
     * until it runs out of characters
     * 
     * Then it appends one final "end of file" token, which isn't strictly
     * needed , but ir makes the parser a little cleaner
     */
    List<Token> scanTokens() {
        while (!isAtEnd()) {
            // We are at the beggining of the next lexeme
            start = current;

            scanToken();
        }

        tokens.add(new Token(EOF, "", null, line));

        return tokens;
    }

    private void scanToken() {
        char c = advance();

        switch (c) {
            case '(':
                addToken(LEFT_PAREN);
                break;
            case ')':
                addToken(RIGHT_PAREN);
                break;
            case '{':
                addToken(LEFT_BRACE);
                break;
            case '}':
                addToken(RIGHT_BRACE);
                break;
            case ',':
                addToken(COMMA);
                break;
            case '.':
                addToken(DOT);
                break;
            case '-':
                addToken(MINUS);
                break;
            case '+':
                addToken(PLUS);
                break;
            case ';':
                addToken(SEMICOLON);
                break;
            case '*':
                addToken(STAR);
                break;

            case '!':
                addToken(match('=') ? BANG_EQUAL : BANG);
                break;
            case '=':
                addToken(match('=') ? EQUAL_EQUAL : EQUAL);
                break;
            case '<':
                addToken(match('=') ? LESS_EQUAL : LESS);
            case '>':
                addToken(match('=') ? GREATER_EQUAL : GREATER);
                break;

            case '/':
                if (match('/')) {
                    // A comment goes until the end of the line
                    while (peek() != '\n' && !isAtEnd())
                        advance();
                } else {
                    addToken(SLASH);
                }
                break;

            case ' ':
            case '\r':
            case '\t':
                // Ignore whitespace
                break;

            case '\n':
                line++;
                break;

            case '"':
                string();
                break;

            default:
                if (isDigit(c)) {
                    number();
                } else if (isAlpha(c)) {
                    identifier();
                } else {
                    Lox.error(line, "Unexpected character.");
                }
                break;
        }    
    }

    private void identifier() {
        while (isAlphaNumeric(peek()))
            advance();

        String text = source.substring(start, current);
        TokenType type = keywords.get(text);

        if (type == null)
            type = IDENTIFIER;

        addToken(type);
    }

    private boolean isAlpha(char c) {
        return (c >= 'a' && c <= 'z') ||
               (c >= 'A' && c <= 'Z') ||
               c == '_';
    }

    private boolean isAlphaNumeric(char c) {
        return isAlpha(c) || isDigit(c);
    }

    /**
     * We consume as many digits as we find for the integer part of the
     * literal and then we look for a fractional part, which is a decimal
     * point followed by at least one digit
     */
    private void number() {
        while (isDigit(peek()))
            advance();

        // Look for a fractional part
        if (peek() == '.' && isDigit(peekNext())) {
            // Consume the '.'
            advance();

            while (isDigit(peek()));
                advance();
        }

        addToken(
            NUMBER, Double.parseDouble(source.substring(start, current)));
    }

    /**
     * Characters are consumed until the " that ends the string is
     * reached
     * 
     * An error is also reported when the string is not closed before
     * the input ends
     */
    private void string() {
        while (peek() != '"' && !isAtEnd()) {
            if (peek() == '\n')
                line++;

            advance();
        }

        if (isAtEnd()) {
            Lox.error(line, "Unterminated string.");

            return;
        }

        // The closing "
        advance();

        String value = source.substring(start + 1, current - 1);

        addToken(STRING, value);
    }
    /**
     * Sort of a conditional advance(), the current character is only
     * consumed if it's what we're looking for
     */
    private boolean match(char expected) {
        if (isAtEnd())
            return false;

        if (source.charAt(current) != expected)
            return false;
        
        current++;

        return true;
    }

    /**
     * Lookahead function: since it only looks at the current unconsumed
     * character, we have one character of lookahead
     */
    private char peek() {
        if (isAtEnd())
            return '\0';
        
        return source.charAt(current);
    }

    /**
     * Looking past the decimal point requires a second character
     * of lookahead since we don't want to consume the '.' until
     *  we're sure there is a digit after it
     */
    private char peekNext() {
        if (current + 1 >= source.length())
            return '\0';

        return source.charAt(current + 1);
    }

    private boolean isDigit(char c) {
        return c >= '0' && c <= '9';
    }

    /**
     * Helper functon that tells us if we've consumed all the
     * characters
     */
    private boolean isAtEnd() {
        return current >= source.length();
    }

    
    // Consumes the next character in the source file and returns it
    private char advance() {
        return source.charAt(current++);
    }

    private void addToken(TokenType type) {
        addToken(type, null);
    }

    // Grabs the text of the current lexeme and creates a new token for it
    private void addToken(TokenType type, Object literal) {
        String text = source.substring(start, current);

        tokens.add(new Token(type, text, literal, line));
    }
}