package jlox;

class Interpreter implements Expr.Visitor<Object> {
	
	@Override
	public Object visitGroupingExpr(Expr.Grouping expr) {
		
		/**
		 * A grouping node has a reference to an inner node for
		 * the expression contained inside the parentheses. To
		 * evaluate the grouping expression itself, the
		 * subexpression is evaluated
		 */
		return evaluate(expr.expression);
	}
	
	@Override
	public Object visitBinaryExpr(Expr.Binary expr) {
		Object left = evaluate(expr.left);
		Object right = evaluate(expr.right);
		
		switch (expr.operator.type) {
		
			// Equaliry operators
			case BANG_EQUAL:
				return !isEqual(left, right);
			case EQUAL_EQUAL:
				return isEqual(left, right);
				
			// Comparison operators
			case GREATER:
				return (double)left > (double)right;
			case GREATER_EQUAL:
				return (double)left >= (double)right;
			case LESS:
				return (double)left < (double)right;
			case LESS_EQUAL:
				return (double)left <= (double)right;
				
			// Arithmetic operators
			case PLUS:
				if (left instanceof Double && right instanceof Double)
					return (double)left + (double)right;
				
				if (left instanceof String && right instanceof String)
					return (String)left + (String)right;
				
				break;
				
			case MINUS:
				return (double)left - (double)right;
			case SLASH:
				return (double)left / (double)right;
			case STAR:
				return (double)left * (double)right;
		}
		
		// Unreachable
		return null;
	}
	
	@Override
	public Object visitUnaryExpr(Expr.Unary expr) {
		Object right = evaluate(expr.right);
		
		switch (expr.operator.type) {
			case BANG:
				return !isTruthy(right);
			case MINUS:
				return -(double)right;
		}
		
		// Unreachable
		return null;
	}
	
	@Override
	public Object visitLiteralExpr(Expr.Literal expr) {
		
		/**
		 * The runtime value was produced during the scanning and
		 * parsing processes and put on the "Literal" object 
		 */
		return expr.value;
	}
		
	private Object evaluate(Expr expr) {
		return expr.accept(this);
	}
	
	private boolean isTruthy(Object object) {
		if (object == null)
			return false;
		
		if (object instanceof Boolean)
			return (boolean)object;
		
		return true;
	}
}